name: Android Build Template (Copy for each tenant)

# This is a TEMPLATE file. Copy and customize for each tenant.
# Example: android-build-tenantA.yml, android-build-tenantB.yml

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    # CUSTOMIZE: Replace TENANT_ID with actual tenant (e.g., TENANTA, TENANTB)
    env:
      TENANT_ID: TENANT_REPLACE_ME  # Change this to TENANTA, TENANTB, etc.
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd scripts && npm ci
      
    - name: Create environment file
      run: |
        echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env
        echo "EXPO_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
        echo "EXPO_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
      
    - name: Sync themes from Supabase
      run: npm run sync-themes
      
    - name: Generate tenant resources
      run: npm run generate-resources
      
    - name: Create keystore directory
      run: mkdir -p client/android/app/keystores
      
    - name: Create upload keystore
      env:
        # CUSTOMIZE: Set these secrets in GitHub repository settings
        # For tenant A: TENANTA_STORE_PASSWORD, TENANTA_KEY_PASSWORD
        # For tenant B: TENANTB_STORE_PASSWORD, TENANTB_KEY_PASSWORD
        KEYSTORE_PASSWORD: ${{ secrets[format('{0}_STORE_PASSWORD', env.TENANT_ID)] }}
        KEY_PASSWORD: ${{ secrets[format('{0}_KEY_PASSWORD', env.TENANT_ID)] }}
        KEY_ALIAS: ${{ secrets[format('{0}_KEY_ALIAS', env.TENANT_ID)] }}
      run: |
        echo "${{ secrets[format('{0}_KEYSTORE_BASE64', env.TENANT_ID)] }}" | base64 -d > client/android/app/keystores/${{ env.TENANT_ID }}-release.keystore
        
    - name: Build Android Release APK
      env:
        # Pass keystore credentials to Gradle
        TENANT_STORE_PASSWORD: ${{ secrets[format('{0}_STORE_PASSWORD', env.TENANT_ID)] }}
        TENANT_KEY_PASSWORD: ${{ secrets[format('{0}_KEY_PASSWORD', env.TENANT_ID)] }}
        TENANT_KEY_ALIAS: ${{ secrets[format('{0}_KEY_ALIAS', env.TENANT_ID)] }}
      run: |
        cd client/android
        ./gradlew assemble${{ env.TENANT_ID }}Release
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.TENANT_ID }}-release-apk
        path: client/android/app/build/outputs/apk/${{ env.TENANT_ID }}/release/*.apk
        retention-days: 30

    # Optional: Upload to Google Play Console (requires additional setup)
    - name: Upload to Google Play Console
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        GOOGLE_PLAY_KEY_JSON: ${{ secrets.GOOGLE_PLAY_KEY_JSON }}
      run: |
        # Install fastlane or use Google Play CLI tools
        # Upload APK to internal testing track
        echo "Upload to Google Play Console implementation goes here"