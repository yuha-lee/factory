#!/usr/bin/env node

/**
 * Generate CI/CD Workflow for New Tenant
 * Creates GitHub Actions workflow file for tenant-specific builds
 * Usage: node generate-ci-workflow.js <tenantId>
 */

const fs = require('fs');
const path = require('path');

function generateWorkflow() {
  const tenantId = process.argv[2];
  
  if (!tenantId) {
    console.log('‚ùå Usage: node generate-ci-workflow.js <tenantId>');
    console.log('üìã Example: node generate-ci-workflow.js tenantC');
    return;
  }
  
  const tenantUpper = tenantId.toUpperCase();
  const tenantCapitalized = tenantId.charAt(0).toUpperCase() + tenantId.slice(1);
  
  console.log(`üöÄ Generating CI/CD workflow for tenant: ${tenantId}\n`);
  
  // Read template file
  const templatePath = path.join(__dirname, '../.github/workflows/android-build-template.yml');
  const outputPath = path.join(__dirname, `../.github/workflows/android-build-${tenantId}.yml`);
  
  if (!fs.existsSync(templatePath)) {
    console.error('‚ùå Template file not found:', templatePath);
    return;
  }
  
  let content = fs.readFileSync(templatePath, 'utf8');
  
  // Replace template variables
  content = content.replace(/name: Android Build Template \(Copy for each tenant\)/g, 
    `name: Android Build ${tenantCapitalized}`);
    
  content = content.replace(/# This is a TEMPLATE file\. Copy and customize for each tenant\.\n# Example: android-build-tenantA\.yml, android-build-tenantB\.yml/g,
    `# Auto-generated workflow for ${tenantId}\n# Generated by: node scripts/generate-ci-workflow.js ${tenantId}`);
    
  content = content.replace(/TENANT_REPLACE_ME/g, tenantUpper);
  
  content = content.replace(/# CUSTOMIZE: Replace TENANT_ID with actual tenant \(e\.g\., TENANTA, TENANTB\)/g,
    `# Configured for tenant: ${tenantId}`);
    
  // Create workflows directory if it doesn't exist
  const workflowsDir = path.dirname(outputPath);
  if (!fs.existsSync(workflowsDir)) {
    fs.mkdirSync(workflowsDir, { recursive: true });
  }
  
  // Write the new workflow file
  fs.writeFileSync(outputPath, content);
  
  console.log(`‚úÖ CI/CD workflow generated successfully!`);
  console.log(`üìç Location: ${outputPath}`);
  console.log(`üîß Workflow name: Android Build ${tenantCapitalized}`);
  
  console.log(`\nüîê REQUIRED GITHUB SECRETS:`);
  console.log(`Set these in GitHub Repository ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions:`);
  console.log(`- ${tenantUpper}_KEYSTORE_BASE64`);
  console.log(`- ${tenantUpper}_STORE_PASSWORD`);
  console.log(`- ${tenantUpper}_KEY_PASSWORD`);
  console.log(`- ${tenantUpper}_KEY_ALIAS`);
  
  console.log(`\nüìã KEYSTORE BASE64 ENCODING:`);
  console.log(`Run this command to get the base64 string:`);
  console.log(`base64 -w 0 client/android/app/keystores/${tenantId}-release.keystore`);
  console.log(`# Windows PowerShell:`);
  console.log(`[Convert]::ToBase64String([IO.File]::ReadAllBytes("client/android/app/keystores/${tenantId}-release.keystore"))`);
  
  console.log(`\nüöÄ TESTING THE WORKFLOW:`);
  console.log(`1. Set up the required GitHub Secrets`);
  console.log(`2. Push to main or develop branch`);
  console.log(`3. Check GitHub Actions tab for build status`);
  console.log(`4. Download APK from workflow artifacts`);
  
  console.log(`\nüéØ Next steps:`);
  console.log(`1. Configure GitHub Secrets`);
  console.log(`2. Test the workflow`);
  console.log(`3. Set up Google Play Console integration (optional)`);
}

generateWorkflow();